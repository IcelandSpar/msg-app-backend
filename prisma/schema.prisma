// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @db.VarChar(255)
  password String @db.VarChar(255)

  Profile Profile?
}

model Profile {
  id                 String   @id @default(uuid())
  profileName        String   @db.VarChar(18)
  bio                String?  @db.VarChar(190)
  friendCode         String?  @db.VarChar(255)
  joined             DateTime @default(now())
  updatedAt          DateTime @updatedAt
  profileImgFilePath String?  @db.VarChar(260)

  friendRequestSender   FriendRequest[] @relation("Sender")
  friendRequestReceiver FriendRequest[] @relation("Receiver")

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String          @unique
  friendOne     Friend[]        @relation("friendOne")
  friendTwo     Friend[]        @relation("friendTwo")
  Message       Message[]
  Member        Member[]
  Group         Group[]
  DirectMessage DirectMessage[]
}

model FriendRequest {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  status    FriendStatus

  Sender     Profile @relation("Sender", fields: [SenderId], references: [id])
  SenderId   String
  Receiver   Profile @relation("Receiver", fields: [ReceiverId], references: [id])
  ReceiverId String

  @@unique([SenderId, ReceiverId])
}

model Friend {
  id                 String               @id @default(uuid())
  friendOneId        String
  friendTwoId        String
  createdAt          DateTime             @default(now())
  friendOne          Profile              @relation("friendOne", fields: [friendOneId], references: [id])
  friendTwo          Profile              @relation("friendTwo", fields: [friendTwoId], references: [id])
  DirectMessageGroup DirectMessageGroup[]

  @@unique([friendOneId, friendTwoId])
}

model DirectMessageGroup {
  id            String          @id @default(uuid())
  friendId      String
  friend        Friend          @relation(fields: [friendId], references: [id])
  DirectMessage DirectMessage[]
}

model DirectMessage {
  id                 String   @id @default(uuid())
  attatchedImagePath String?  @db.VarChar(260)
  messageContent     String?  @db.VarChar(2000)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  authorId String
  author   Profile @relation(fields: [authorId], references: [id])

  directMessageGroupId String
  directMessageGroup   DirectMessageGroup @relation(fields: [directMessageGroupId], references: [id], onDelete: Cascade)
}

model Group {
  id           String   @id @default(uuid())
  groupName    String   @db.VarChar(255)
  groupImgPath String?  @db.VarChar(260)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  creatorId    String

  creator Profile   @relation(fields: [creatorId], references: [id])
  Member  Member[]
  Message Message[]
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole
  joined    DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  profileId String
  groupId   String

  member Profile @relation(fields: [profileId], references: [id])
  group  Group   @relation(fields: [groupId], references: [id])
}

model Message {
  id                 String   @id @default(uuid())
  attatchedImagePath String?  @db.VarChar(260)
  messageContent     String?  @db.VarChar(2000)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  groupId       String
  group         Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  authorId      String
  messageAuthor Profile      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  MessageImg    MessageImg[]
}

model MessageImg {
  id      String  @id @default(uuid())
  imgPath String  @db.VarChar(260)
  spoiler Boolean @default(false)

  messageId String
  message   Message @relation(fields: [messageId], references: [id])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum MemberRole {
  USER
  ADMIN
}
